# Terraform version and provider block
terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 4.0"
    }
  }
}

provider "aws" {
  region = "us-east-1" # Change as needed
}

# Variables
variable "vpc_cidr"         { default = "10.0.0.0/16" }
variable "public_subnet_1"  { default = "10.0.0.0/24" }
variable "public_subnet_2"  { default = "10.0.1.0/24" }
variable "private_subnet_1" { default = "10.0.2.0/24" }
variable "private_subnet_2" { default = "10.0.3.0/24" }

variable "db_instance_type"  { default = "db.t3.micro" }
variable "db_allocated_size" { default = 20 }
variable "db_user"           { default = "dbadmin" }
variable "db_password"       { sensitive = true }
variable "db_name"           { default = "mydatabase" }

variable "eks_cluster_name" { default = "MyEKSCluster" }
variable "eks_admin_arn"    { description = "IAM ARN of the EKS admin user" }

variable "eks_desired_size" { default = 2 }
variable "eks_min_size"     { default = 1 }
variable "eks_max_size"     { default = 4 }

# 1. VPC and Subnets
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  name    = "eks-vpc"
  cidr    = var.vpc_cidr

  azs             = ["us-east-1a", "us-east-1b"]
  public_subnets  = [var.public_subnet_1, var.public_subnet_2]
  private_subnets = [var.private_subnet_1, var.private_subnet_2]

  enable_nat_gateway     = true
  single_nat_gateway     = true
  enable_dns_hostnames   = true
  enable_dns_support     = true

  tags = {
    Terraform = "true"
    Environment = "dev"
  }
}

# 2. Security Groups
module "eks_sg" {
  source  = "terraform-aws-modules/security-group/aws"
  name    = "eks-workers"
  vpc_id  = module.vpc.vpc_id

  ingress_with_source_security_group_id = [
    {
      from_port                = 80
      to_port                  = 80
      protocol                 = "tcp"
      source_security_group_id = module.alb_sg.security_group_id
    },
    {
      from_port                = 443
      to_port                  = 443
      protocol                 = "tcp"
      source_security_group_id = module.alb_sg.security_group_id
    }
  ]

  egress_rules = ["all-all"]
}

module "alb_sg" {
  source = "terraform-aws-modules/security-group/aws"
  name   = "alb"
  vpc_id = module.vpc.vpc_id

  ingress_cidr_blocks = ["0.0.0.0/0"]
  ingress_rules       = ["http-80", "https-443"]
  egress_rules        = ["all-all"]
}

module "rds_sg" {
  source  = "terraform-aws-modules/security-group/aws"
  name    = "rds"
  vpc_id  = module.vpc.vpc_id

  ingress_with_source_security_group_id = [
    {
      from_port                = 3306
      to_port                  = 3306
      protocol                 = "tcp"
      source_security_group_id = module.eks_sg.security_group_id
    }
  ]

  egress_rules = ["all-all"]
}

# 3. RDS
resource "aws_db_subnet_group" "default" {
  name       = "rds-subnet-group"
  subnet_ids = module.vpc.private_subnets
  tags = {
    Name = "rds-subnet-group"
  }
}

resource "aws_db_instance" "default" {
  identifier             = "mydb"
  instance_class         = var.db_instance_type
  allocated_storage      = var.db_allocated_size
  engine                 = "mysql"
  username               = var.db_user
  password               = var.db_password
  db_name                = var.db_name
  multi_az               = true
  db_subnet_group_name   = aws_db_subnet_group.default.name
  vpc_security_group_ids = [module.rds_sg.security_group_id]
  skip_final_snapshot    = true
  backup_retention_period = 7
  tags = {
    Name = "rds-instance"
  }
}

# 4. EKS Cluster
module "eks" {
  source          = "terraform-aws-modules/eks/aws"
  cluster_name    = var.eks_cluster_name
  cluster_version = "1.29"

  vpc_id      = module.vpc.vpc_id
  subnet_ids  = module.vpc.private_subnets
  cluster_endpoint_public_access = true

  manage_aws_auth = true
  aws_auth_users = [
    {
      userarn  = var.eks_admin_arn
      username = "eks-admin"
      groups   = ["system:masters"]
    }
  ]

  access_config = {
    authentication_mode                      = "API_AND_CONFIG_MAP"
    bootstrap_cluster_creator_admin_permissions = true

    access_entries = [
      {
        principal_arn = var.eks_admin_arn
        access_policies = [
          {
            policy_arn   = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
            access_scope = {
              type = "cluster"
            }
          }
        ]
      }
    ]
  }

  eks_managed_node_groups = {
    default = {
      desired_size   = var.eks_desired_size
      max_size       = var.eks_max_size
      min_size       = var.eks_min_size
      instance_types = ["t3.medium"]
      ami_type       = "AL2_x86_64"
      name           = "eks-nodes"
    }
  }

  node_security_group_additional_rules = {
    ingress_self_all = {
      description = "Allow all within node SG"
      protocol    = "-1"
      from_port   = 0
      to_port     = 0
      type        = "ingress"
      self        = true
    }
  }

  tags = {
    Environment = "dev"
    Terraform   = "true"
  }
}

# 5. ALB
module "alb" {
  source = "terraform-aws-modules/alb/aws"

  name = "eks-alb"
  load_balancer_type = "application"
  vpc_id             = module.vpc.vpc_id
  subnets            = module.vpc.public_subnets
  security_groups    = [module.alb_sg.security_group_id]

  target_groups = [
    {
      name_prefix      = "tg"
      backend_protocol = "HTTP"
      backend_port     = 80
      target_type      = "ip"
      health_check = {
        enabled  = true
        path     = "/"
        interval = 30
        timeout  = 5
      }
    }
  ]

  listeners = [
    {
      port     = 80
      protocol = "HTTP"
      default_action = {
        type             = "forward"
        target_group_index = 0
      }
    }
  ]

  tags = {
    Environment = "dev"
    Terraform   = "true"
  }
}

# 6. S3 Bucket
resource "aws_s3_bucket" "app_bucket" {
  bucket = "${var.eks_cluster_name}-my-application-bucket-${data.aws_caller_identity.current.account_id}"
  force_destroy = true

  tags = {
    Name        = "app-bucket"
    Environment = "dev"
  }
}

resource "aws_s3_bucket_versioning" "versioning" {
  bucket = aws_s3_bucket.app_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_public_access_block" "block" {
  bucket = aws_s3_bucket.app_bucket.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# 7. CloudWatch Log Group for EKS
resource "aws_cloudwatch_log_group" "eks" {
  name              = "/aws/eks/${var.eks_cluster_name}/cluster"
  retention_in_days = 7

  tags = {
    Name = "eks-log-group"
  }
}

data "aws_caller_identity" "current" {}
