terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}
 
provider "aws" {
  region = var.region
}
 
# Fetch the latest Amazon Linux 2 AMI
data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]
 
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }
 
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}
 
resource "aws_vpc" "UST-B-VPC" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = "UST-B-VPC"
  }
}
 
resource "aws_internet_gateway" "UST-B-IGW" {
  vpc_id = aws_vpc.UST-B-VPC.id
  tags = {
    Name = "UST-B-IGW"
  }
}
 
resource "aws_subnet" "UST-B-PubSub" {
  vpc_id            = aws_vpc.UST-B-VPC.id
  cidr_block        = var.public_subnet_cidr
  availability_zone = var.public_az
  #map_customer_owned_ip_on_launch = true
  tags = {
    Name = "UST-B-PubSub"
  }
}
 
resource "aws_subnet" "UST-B-PriSub" {
  vpc_id            = aws_vpc.UST-B-VPC.id
  cidr_block        = var.private_subnet_cidr
  availability_zone = var.private_az
  tags = {
    Name = "UST-B-PriSub"
  }
}
 
resource "aws_route_table" "UST-B-PubRT" {
  vpc_id = aws_vpc.UST-B-VPC.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.UST-B-IGW.id
  }
  tags = {
    Name = "UST-B-PubRT"
  }
}
 
resource "aws_route_table" "UST-B-PriRT" {
  vpc_id = aws_vpc.UST-B-VPC.id
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.UST-B-NAT-GW.id
  }
  tags = {
    Name = "UST-B-PriRT"
  }
}
 
resource "aws_route_table_association" "UST-B-PubSub-RTA" {
  subnet_id      = aws_subnet.UST-B-PubSub.id
  route_table_id = aws_route_table.UST-B-PubRT.id
}
 
resource "aws_route_table_association" "UST-B-PriSub-RTA" {
  subnet_id      = aws_subnet.UST-B-PriSub.id
  route_table_id = aws_route_table.UST-B-PriRT.id
}
 
resource "aws_eip" "UST-B-NAT-EIP" {
  vpc = true
  tags = {
    Name = "UST-B-NAT-EIP"
  }
}
 
resource "aws_nat_gateway" "UST-B-NAT-GW" {
  allocation_id = aws_eip.UST-B-NAT-EIP.id
  subnet_id     = aws_subnet.UST-B-PubSub.id
  tags = {
    Name = "UST-B-NAT-GW"
  }
}
 
resource "aws_security_group" "UST-B-SG" {
  name        = "UST-B-SG"
  description = "Allow SSH and HTTP"
  vpc_id      = aws_vpc.UST-B-VPC.id
 
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
 
resource "aws_network_acl" "UST-B-NACL" {
  vpc_id = aws_vpc.UST-B-VPC.id
  tags = {
    Name = "UST-B-NACL"
  }
 
  ingress {
    rule_no    = 100
    protocol   = "-1"
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }
 
  egress {
    rule_no    = 100
    protocol   = "-1"
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }
}
 
resource "aws_network_acl_association" "UST-B-PubSub-NACL-association" {
  subnet_id      = aws_subnet.UST-B-PubSub.id
  network_acl_id = aws_network_acl.UST-B-NACL.id
}
 
resource "aws_network_acl_association" "UST-B-PriSub-NACL-association" {
  subnet_id      = aws_subnet.UST-B-PriSub.id
  network_acl_id = aws_network_acl.UST-B-NACL.id
}
 
resource "aws_instance" "UST-B-public-EC2" {
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.UST-B-PubSub.id
  vpc_security_group_ids = [aws_security_group.UST-B-SG.id]
  associate_public_ip_address = true
 
  user_data = <<-EOF
                #!/bin/bash
                yum update -y
                yum install -y httpd
                systemctl start httpd
                systemctl enable httpd
                echo "<h1>Hello from UST-B public EC2 instance</h1>" > /var/www/html/index.html
            EOF
 
  tags = {
    Name = "UST-B-public-EC2"
  }
}
 
resource "aws_instance" "UST-B-private-EC2" {
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.UST-B-PriSub.id
  vpc_security_group_ids = [aws_security_group.UST-B-SG.id]
 
  tags = {
    Name = "UST-B-private-EC2"
  }
}
 
output "public_instance_ip" {
  value = aws_instance.UST-B-public-EC2.public_ip
}
 
output "vpc_id" {
  value = aws_vpc.UST-B-VPC.id
}
 
 
main.tf
 
variable "region" {
  description = "AWS region"
  type        = string
}
 
variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
}
 
variable "public_subnet_cidr" {
  description = "CIDR block for the public subnet"
  type        = string
}
 
variable "private_subnet_cidr" {
  description = "CIDR block for the private subnet"
  type        = string
}
 
variable "public_az" {
  description = "Availability zone for public subnet"
  type        = string
}
 
variable "private_az" {
  description = "Availability zone for private subnet"
  type        = string
}
 
variable "instance_type" {
  description = "EC2 instance type"
  type        = string
}
 
 
variable.tf
 
region              = "us-east-1"
vpc_cidr            = "192.168.0.0/24"
public_subnet_cidr  = "192.168.0.0/25"
private_subnet_cidr = "192.168.0.128/25"
public_az           = "us-east-1a"
private_az          = "us-east-1b"
instance_type       = "t2.micro"
 
 
terraform.tfvars
 