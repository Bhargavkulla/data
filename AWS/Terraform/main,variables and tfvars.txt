main.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~>5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

resource "aws_vpc" "ust_b_vpc" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = "UST-B-VPC-tag"
  }
}

resource "aws_internet_gateway" "ust_b_igw" {
  vpc_id = aws_vpc.ust_b_vpc.id
  tags = {
    Name = "UST-B-IGW-tag"
  }
}

resource "aws_subnet" "ust_b_pubsub" {
  vpc_id            = aws_vpc.ust_b_vpc.id
  cidr_block        = var.pub_subnet_cidr
  availability_zone = var.az_1
  tags = {
    Name = "UST-B-PUBSUB-tag"
  }
}

resource "aws_subnet" "ust_b_prisub" {
  vpc_id            = aws_vpc.ust_b_vpc.id
  cidr_block        = var.pri_subnet_cidr
  availability_zone = var.az_2
  tags = {
    Name = "UST-B-PRISUB-tag"
  }
}

resource "aws_route_table" "ust_b_pubsub_rt" {
  vpc_id = aws_vpc.ust_b_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.ust_b_igw.id
  }

  tags = {
    Name = "UST-B-PUBSUB-RT-tag"
  }
}

resource "aws_route_table_association" "ust_b_pubsub_assoc" {
  subnet_id      = aws_subnet.ust_b_pubsub.id
  route_table_id = aws_route_table.ust_b_pubsub_rt.id
}

resource "aws_eip" "ust_b_eip" {
  domain = "vpc"
}

resource "aws_nat_gateway" "ust_b_natgw" {
  allocation_id = aws_eip.ust_b_eip.id
  subnet_id     = aws_subnet.ust_b_pubsub.id
  depends_on    = [aws_internet_gateway.ust_b_igw]

  tags = {
    Name = "UST-B-NATGW-tag"
  }
}

resource "aws_route_table" "ust_b_prisub_rt" {
  vpc_id = aws_vpc.ust_b_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.ust_b_natgw.id
  }

  tags = {
    Name = "UST-B-PRISUB-RT-tag"
  }
}

resource "aws_route_table_association" "ust_b_prisub_assoc" {
  subnet_id      = aws_subnet.ust_b_prisub.id
  route_table_id = aws_route_table.ust_b_prisub_rt.id
}

resource "aws_security_group" "ust_b_sg" {
  name        = "UST-B-SG"
  description = "Allow SSH and HTTP"
  vpc_id      = aws_vpc.ust_b_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_network_acl" "ust_b_nacl" {
  vpc_id = aws_vpc.ust_b_vpc.id

  ingress {
    protocol   = "-1"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  egress {
    protocol   = "-1"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }
}

resource "aws_network_acl_association" "ust_b_nacl_pubsub" {
  subnet_id      = aws_subnet.ust_b_pubsub.id
  network_acl_id = aws_network_acl.ust_b_nacl.id
}

resource "aws_network_acl_association" "ust_b_nacl_prisub" {
  subnet_id      = aws_subnet.ust_b_prisub.id
  network_acl_id = aws_network_acl.ust_b_nacl.id
}

resource "aws_instance" "ust_b_ec2_public" {
  ami                         = var.ami_id
  instance_type               = var.instance_type
  subnet_id                   = aws_subnet.ust_b_pubsub.id
  vpc_security_group_ids      = [aws_security_group.ust_b_sg.id]
  associate_public_ip_address = true

  user_data = <<-EOF
#!/bin/bash
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "<h1>Hi bro how are you!</h1>" > /var/www/html/index.html
EOF

  tags = {
    Name = "UST-B-public-EC2"
  }
}

resource "aws_instance" "ust_b_ec2_private" {
  ami                    = var.ami_id
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.ust_b_prisub.id
  vpc_security_group_ids = [aws_security_group.ust_b_sg.id]

  tags = {
    Name = "UST-B-private-EC2"
  }
}



variables .tf
variable "aws_region" {
  default = "us-east-1"
}
 
variable "vpc_cidr" {}
variable "pub_subnet_cidr" {}
variable "pri_subnet_cidr" {}
variable "az_1" {}
variable "az_2" {}
variable "ami_id" {}
variable "instance_type" {}


.tfvars
aws_region       = "us-east-1"
vpc_cidr         = "172.16.0.0/16"
pub_subnet_cidr  = "172.16.1.0/24"
pri_subnet_cidr  = "172.16.2.0/24"
az_1             = "us-east-1a"
az_2             = "us-east-1b"
ami_id           = "ami-0f88e80871fd81e91"
instance_type    = "t2.micro"
