terraform {
    backend "s3" {
        bucket = "my-tf-state-bucket15"
        key = "us-east-1/terraform-tfstate"
        region = "us-east-1"
    }
}

provider "aws" {
    region = "us-east-1"
}

data "aws_availability_zones" "available" {}

# vpc
resource "aws_vpc" "main" {
    cidr_block = var.vpc_cidr
    enable_dns_support = true
    enable_dns_hostnames = true
}

resource "aws_vpc_dhcp_options" "dns" {
    domain_name_servers = ["AmazonProvidedDNS"]
}

resource "aws_dhcp_options_association" "dns_association"{
    vpc_id = aws_vpc.main.id
    dhcp_options_id = aws_vpc_dhcp_options.dns.id
}

# internet gateway
resource "aws_internet_gateway" "ig" {
    vpc_id = aws_vpc.main.id
}

# subnets
resource "aws_subnet" "public1" {
    vpc_id = aws_vpc.main.id
    cidr_block = var.public_subnet1
    availability_zone = data.aws_availability_zones.available.names[0]
    map_public_ip_on_launch = true
}

resource "aws_subnet" "public2" {
    vpc_id = aws_vpc.main.id
    cidr_block = var.public_subnet2
    availability_zone = data.aws_availability_zones.available.names[1]
    map_public_ip_on_launch = true
}

resource "aws_subnet" "private1" {
    vpc_id = aws_vpc.main.id
    cidr_block = var.private_subnet1
    availability_zone = data.aws_availability_zones.available.names[0]
}

resource "aws_subnet" "private2" {
    vpc_id = aws_vpc.main.id
    cidr_block = var.private_subnet2
    availability_zone = data.aws_availability_zones.available.names[1]
}

# eip
resource "aws_eip" "nat" {
    vpc = true
}

# nat 
resource "aws_nat_gateway" "nat" {
    allocation_id = aws_eip.nat.id
    subnet_id = aws_subnet.public1.id
    depends_on = [aws_internet_gateway.ig]
}

# public route tables
resource "aws_route_table" "public" {
    vpc_id = aws_vpc.main.id
}

resource "aws_route" "public_route" {
    route_table_id = aws_route_table.public.id
    destination_cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.ig.id
}

resource "aws_route_table_association" "public1" {
    route_table_id = aws_route_table.public.id
    subnet_id = aws_subnet.public1.id
}

resource "aws_route_table_association" "public2" {
    route_table_id = aws_route_table.public.id
    subnet_id = aws_subnet.public2.id
}

# private route tables
resource "aws_route_table" "private" {
    vpc_id = aws_vpc.main.id
}

resource "aws_route" "private_route" {
    route_table_id = aws_route_table.private.id
    destination_cidr_block = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
}

resource "aws_route_table_association" "private1" {
    route_table_id = aws_route_table.private.id
    subnet_id = aws_subnet.private1.id
}

resource "aws_route_table_association" "private2" {
    route_table_id = aws_route_table.private.id
    subnet_id = aws_subnet.private2.id
}

# security groups
resource "aws_security_group" "eks-nodes" {
    name = "eks-nodes-sg"
    description = "allow all traffic"
    vpc_id = aws_vpc.main.id

    ingress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

resource "aws_security_group" "rds" {
    name = "rds-sg"
    description = "allow Mysql/Aurora traffic"
    vpc_id = aws_vpc.main.id

    ingress {
        from_port = 3306
        to_port = 3306
        protocol = "tcp"
        cidr_blocks = [var.vpc_cidr]
    }

    egress {
        from_port = 0
        to_port = 0
        protocol = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

# db_subnet_group
resource "aws_db_subnet_group" "rds" {
    name = "ecommerce-db-subnet-group"
    subnet_ids = [aws_subnet.private1.id, aws_subnet.private2.id]
}

# db_instance
resource "aws_db_instance" "rds" {
    identifier = "catalog-db"
    instance_class = "db.t3.micro"
    engine = "mysql"
    username = var.db_username
    password = var.db_password
    allocated_storage = 20
    db_subnet_group_name = aws_db_subnet_group.rds.name
    vpc_security_group_ids = [aws_security_group.rds.id]
    publicly_accessible = false
    backup_retention_period = 1
    db_name = "catalogdb"
}

# dynamodb
resource "aws_dynamodb_table" "cart" {
    name = "cart"
    hash_key = "id"
    billing_mode = "PROVISIONED"
    read_capacity = 5
    write_capacity = 5
    attribute {
        name = "id"
        type = "S"
    }
}

# eks
module "eks" {
    source = "terraform-aws-modules/eks/aws"
    cluster_name = var.cluster_name
    cluster_version = "1.29"
    cluster_endpoint_public_access = true
    subnet_ids = [aws_subnet.private1.id, aws_subnet.private2.id]
    vpc_id = aws_vpc.main.id

    eks_managed_node_groups = {
        default = {
            desired_size = var.eks_desired_size
            max_size = var.eks_max_size
            min_size = var.eks_min_size
            instance_types = ["t3.medium"]
            name = "default"
            ami_type = "AL2_x86_64"
            key_name = "bhargav1"
        }
    }
}
